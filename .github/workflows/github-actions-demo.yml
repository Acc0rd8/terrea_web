name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:17
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }} 
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        env:
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
        ports:
          - 6379:6379

    steps:
      - name: checkout code
        uses: actions/checkout@v2
    
      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: run backend tests
        run: |
          cd backend
          pytest

      - name: setup Node.js
        uses: actions/setup-node@v2
        with:
            node-version: '22'

      - name: install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: build Docker images
        run: docker-compose build

      - name: push Docker images
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker-compose push
