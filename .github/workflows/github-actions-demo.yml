name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: .env-non-dev

    steps:
      - name: checkout code
        uses: actions/checkout@v2

      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: run backend tests
        run: |
          cd backend
          echo "LOG_LEVEL=${{ vars.LOG_LEVEL }}" >> .env-non-dev
          echo "DB_USER=${{ vars.DB_USER }}" >> .env-non-dev
          echo "DB_PASS=${{ vars.DB_PASS }}" >> .env-non-dev
          echo "DB_HOST=${{ vars.DB_HOST }}" >> .env-non-dev
          echo "DB_PORT=${{ vars.DB_PORT }}" >> .env-non-dev
          echo "DB_NAME=${{ vars.DB_NAME }}" >> .env-non-dev
          echo "DB_USER_TEST=${{ vars.DB_USER_TEST }}" >> .env-non-dev
          echo "DB_PASS_TEST=${{ vars.DB_PASS_TEST }}" >> .env-non-dev
          echo "DB_HOST_TEST=${{ vars.DB_HOST_TEST }}" >> .env-non-dev
          echo "DB_PORT_TEST=${{ vars.DB_PORT_TEST }}" >> .env-non-dev
          echo "DB_NAME_TEST=${{ vars.DB_NAME_TEST }}" >> .env-non-dev
          echo "REDIS_HOST=${{ vars.REDIS_HOST }}" >> .env-non-dev
          echo "REDIS_PORT=${{ vars.REDIS_PORT }}" >> .env-non-dev
          echo "REDIS_PASSWORD=${{ vars.REDIS_PASSWORD }}" >> .env-non-dev
          echo "REDIS_USER=${{ vars.REDIS_USER }}" >> .env-non-dev
          echo "REDIS_USER_PASSWORD=${{ vars.REDIS_USER_PASSWORD }}" >> .env-non-dev
          echo "SMTP_HOST=${{ vars.SMTP_HOST }}" >> .env-non-dev
          echo "SMTP_PORT=${{ vars.SMTP_PORT }}" >> .env-non-dev
          echo "SMTP_USER=${{ vars.SMTP_USER }}" >> .env-non-dev
          echo "SMTP_PASS=${{ vars.SMTP_PASS }}" >> .env-non-dev
          echo "SECRET_KEY=${{ vars.SECRET_KEY }}" >> .env-non-dev
          echo "ALGORITHM=${{ vars.ALGORITHM }}" >> .env-non-dev
          echo "ACCESS_TOKEN_EXPIRE_DAYS=${{ vars.ACCESS_TOKEN_EXPIRE_DAYS }}" >> .env-non-dev
          docker compose up
          pytest

      - name: setup Node.js
        uses: actions/setup-node@v2
        with:
            node-version: '22'

      - name: install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: build Docker images
        run: docker-compose build

      - name: push Docker images
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker-compose push
